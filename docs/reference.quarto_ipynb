{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "[quarto_build_site(module_name::AbstractString; kwargs...)](reference/quarto_build_site.qmd)\n",
        "\n",
        "Create all the files necessary to build the Quarto  website for the first time.\n",
        " \n",
        "\n",
        "\n",
        "            \n",
        "[quarto_callout_block(s)](reference/quarto_callout_block.qmd)\n",
        "\n",
        "Create a callout block with the string `s`.\n",
        " \n",
        "\n",
        "\n",
        "            \n",
        "[quarto_doc(s::Symbol)](reference/quarto_doc.qmd)\n",
        "\n",
        "Create the documentation of a symbol (function, object, etc) `s`.\n",
        " \n",
        "\n",
        "\n",
        "            \n",
        "[quarto_doc_page(s; dir = \"docs/reference\")](reference/quarto_doc_page.qmd)\n",
        "\n",
        "Given a symbol `s`, write its .qmd doc into the folder `dir`.\n",
        " \n",
        "\n",
        "\n",
        "            \n",
        "[quarto_format(m::Markdown.Code, eval = false)](reference/quarto_format.qmd)\n",
        "\n",
        "Format a block of markdown code to Quarto.\n",
        " \n",
        "\n",
        "\n",
        "            \n",
        "[quarto_format(m)](reference/quarto_format.qmd)\n",
        "\n",
        "Return a plain text from `m`.\n",
        " \n",
        "\n",
        "\n",
        "            \n",
        "[quarto_format(m::Markdown.Paragraph)](reference/quarto_format.qmd)\n",
        "\n",
        "Return a plain text of `m` and a line break.\n",
        " \n",
        "\n",
        "\n",
        "            \n",
        "[quarto_format(m::AbstractString)](reference/quarto_format.qmd)\n",
        "\n",
        "Returns `m`.\n",
        " \n",
        "\n",
        "\n",
        "            \n",
        "[quarto_format(m::Markdown.Header{1})](reference/quarto_format.qmd)\n",
        "\n",
        "Take a level 1 header and write it as a level 3 header.\n",
        " \n",
        "\n",
        "\n",
        "            \n",
        "[quarto_format(md::Markdown.MD)](reference/quarto_format.qmd)\n",
        "\n",
        "Given a markdown block, apply `quarto_format` to each of its elements and concatenate the resulting string.\n",
        " \n",
        "\n",
        "\n",
        "            \n",
        "[quarto_format(md::Markdown.Admonition)](reference/quarto_format.qmd)\n",
        "\n",
        "Format a Markdown.Admonition into a callout block in Quarto.\n",
        " \n",
        "\n",
        "\n",
        "            \n",
        "[quarto_index()](reference/quarto_index.qmd)\n",
        "\n",
        "Generate the index.qmd file. It is just a copy of the README.md file.\n"
      ],
      "id": "1be4c3ef"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: false\n",
        "\n",
        "QuartoDocBuilder.quarto_styles"
      ],
      "id": "a50a532e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "No documentation found! :(\n",
        "            \n",
        "[quarto_yaml(\n",
        "  module_name::AbstractString\n",
        "  ;output_dir = \"site\"\n",
        "  ,freeze = \"auto\"\n",
        "  ,cache = \"true\"\n",
        "  ,warning = \"false\"\n",
        "  ,comments = \"true\"\n",
        "  ,repo = \"USERNAME/REPOSITORY\"\n",
        "  ,theme = \"flatly\"\n",
        "  )](reference/quarto_yaml.qmd)\n",
        "\n",
        "Generate the _quarto.yaml file."
      ],
      "id": "b7ec9b63"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "julia-nodeps-1.9",
      "language": "julia",
      "display_name": "Julia nodeps 1.9.3",
      "path": "/home/vituri/.local/share/jupyter/kernels/julia-nodeps-1.9"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}